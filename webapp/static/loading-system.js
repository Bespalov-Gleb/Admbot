/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ skeleton screens
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –ø—É—Å—Ç—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
 */

class LoadingSystem {
  constructor() {
    this.activeLoaders = new Map();
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å skeleton screen
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   * @param {string} type - –¢–∏–ø skeleton (cards, list, grid, text)
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  static showSkeleton(containerId, type = 'cards', count = 6) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.warn(`Container ${containerId} not found`);
      return;
    }

    const skeleton = this.createSkeleton(type, count);
    container.innerHTML = '';
    container.appendChild(skeleton);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    skeleton.classList.add('skeleton-appear');
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å skeleton —ç–ª–µ–º–µ–Ω—Ç
   */
  static createSkeleton(type, count) {
    const skeleton = document.createElement('div');
    skeleton.className = 'skeleton-container';
    
    switch(type) {
      case 'cards':
        skeleton.innerHTML = Array(count).fill(0).map((_, i) => `
          <div class="skeleton-card" style="animation-delay: ${i * 0.1}s">
            <div class="skeleton-image"></div>
            <div class="skeleton-content">
              <div class="skeleton-text"></div>
              <div class="skeleton-text short"></div>
              <div class="skeleton-price"></div>
            </div>
          </div>
        `).join('');
        break;
        
      case 'list':
        skeleton.innerHTML = Array(count).fill(0).map((_, i) => `
          <div class="skeleton-list-item" style="animation-delay: ${i * 0.1}s">
            <div class="skeleton-avatar"></div>
            <div class="skeleton-content">
              <div class="skeleton-text"></div>
              <div class="skeleton-text short"></div>
            </div>
          </div>
        `).join('');
        break;
        
      case 'grid':
        skeleton.innerHTML = Array(count).fill(0).map((_, i) => `
          <div class="skeleton-grid-item" style="animation-delay: ${i * 0.1}s">
            <div class="skeleton-image"></div>
            <div class="skeleton-text"></div>
          </div>
        `).join('');
        break;
        
      case 'text':
        skeleton.innerHTML = Array(count).fill(0).map((_, i) => `
          <div class="skeleton-text-line" style="animation-delay: ${i * 0.1}s"></div>
        `).join('');
        break;
        
      case 'restaurant':
        skeleton.innerHTML = Array(count).fill(0).map((_, i) => `
          <div class="skeleton-restaurant" style="animation-delay: ${i * 0.1}s">
            <div class="skeleton-hero"></div>
            <div class="skeleton-info">
              <div class="skeleton-text"></div>
              <div class="skeleton-text short"></div>
              <div class="skeleton-meta">
                <div class="skeleton-badge"></div>
                <div class="skeleton-badge"></div>
              </div>
            </div>
          </div>
        `).join('');
        break;
    }
    
    return skeleton;
  }

  /**
   * –°–∫—Ä—ã—Ç—å skeleton –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  static hideSkeleton(containerId, content) {
    const container = document.getElementById(containerId);
    if (!container) return;

    // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º skeleton
    const skeleton = container.querySelector('.skeleton-container');
    if (skeleton) {
      skeleton.classList.add('skeleton-fade-out');
      setTimeout(() => {
        container.innerHTML = content;
        container.classList.add('content-appear');
      }, 200);
    } else {
      container.innerHTML = content;
      container.classList.add('content-appear');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å loading spinner
   */
  static showSpinner(containerId, text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const container = document.getElementById(containerId);
    if (!container) return;

    container.innerHTML = `
      <div class="loading-spinner-container">
        <div class="loading-spinner"></div>
        <div class="loading-text">${text}</div>
      </div>
    `;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å error state —Å retry –∫–Ω–æ–ø–∫–æ–π
   */
  static showError(containerId, message, onRetry) {
    const container = document.getElementById(containerId);
    if (!container) return;

    container.innerHTML = `
      <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <div class="error-message">${message}</div>
        ${onRetry ? `<button class="retry-btn" onclick="(${onRetry.toString()})()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>` : ''}
      </div>
    `;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å empty state
   */
  static showEmpty(containerId, message, icon = 'üì≠') {
    const container = document.getElementById(containerId);
    if (!container) return;

    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">${icon}</div>
        <div class="empty-message">${message}</div>
      </div>
    `;
  }

  /**
   * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º loading state
   */
  static async withLoading(containerId, asyncFunction, options = {}) {
    const {
      skeletonType = 'cards',
      skeletonCount = 6,
      loadingText = '–ó–∞–≥—Ä—É–∑–∫–∞...',
      errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
    } = options;

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton
      this.showSkeleton(containerId, skeletonType, skeletonCount);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
      const result = await asyncFunction();
      
      // –°–∫—Ä—ã–≤–∞–µ–º skeleton
      this.hideSkeleton(containerId, result);
      
      return result;
    } catch (error) {
      console.error('Loading error:', error);
      this.showError(containerId, errorMessage, asyncFunction);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.LoadingSystem = LoadingSystem;